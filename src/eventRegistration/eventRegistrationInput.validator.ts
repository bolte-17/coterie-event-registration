/* eslint-disable */
// generated by typescript-json-validator
import {inspect} from 'util';
import Ajv , * as AJV from 'ajv';
import addFormats from 'ajv-formats';import {formatNames} from 'ajv-formats/dist/formats';
import EventRegistrationInput from './eventRegistrationInput';
undefined
  export const ajv = new Ajv({"allErrors":true,"coerceTypes":false,"removeAdditional":false,"strict":false,"strictNumbers":false,"strictRequired":false,"strictSchema":false,"strictTuples":false,"strictTypes":false,"useDefaults":true});
  addFormats(ajv, {mode: "fast", formats: formatNames, keywords: true});
  ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));
  
export {EventRegistrationInput};
export const EventRegistrationInputSchema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "defaultProperties": [
  ],
  "definitions": {
    "EventType": {
      "enum": [
        "Keynote",
        "Panel Discussion",
        "Workshop"
      ],
      "type": "string"
    }
  },
  "properties": {
    "age": {
      "minimum": 18,
      "type": "integer"
    },
    "discountCode": {
      "enum": [
        "EARLYBIRD",
        "STUDENT"
      ],
      "type": "string"
    },
    "email": {
      "format": "email",
      "minLength": 1,
      "type": "string"
    },
    "eventType": {
      "$ref": "#/definitions/EventType"
    },
    "firstName": {
      "minLength": 1,
      "type": "string"
    },
    "lastName": {
      "minLength": 1,
      "type": "string"
    }
  },
  "required": [
    "age",
    "email",
    "eventType",
    "firstName",
    "lastName"
  ],
  "type": "object"
};
export type ValidateFunction<T> = ((data: unknown) => data is T) & Pick<AJV.ValidateFunction, 'errors'>
 export const isEventRegistrationInput = ajv.compile(EventRegistrationInputSchema) as ValidateFunction<EventRegistrationInput>;
export default function validate(value: unknown): EventRegistrationInput {
  if (isEventRegistrationInput(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(isEventRegistrationInput.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'EventRegistrationInput'}) +
      '\n\n' +
      inspect(value),
    );
  }
};
